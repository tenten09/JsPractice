==============================
命名規則
ok         
英数字 $ _          

NG
let my-name
let 0price
===================================
let price = 500
price = pricee + 100
price += 100;
===================================
const signal = 'pink';

// if (signal === 'red') {
//   console.log('stop!');
// } else if (signal === 'yellow') {
//   console.log('caution');
// } else if (signal === 'blue') {
//   console.log('go');
// }

switch (signal) {
  case 'red':
    console.log('stop');
    break;
    case 'yellow':
    console.log('caution');
    break;
    case 'blue':
    case 'green':
    console.log('go');
    break;
    default:
      console.log('wrong signal');
      break;
}
=============================================
for (let i = 1; i <= 10; i++) {
  console.log(`hello ${i}`);
}
=============================================

let hp = -50

 do  {
  console.log(`${hp} HP left`);
  hp -= 15;
} while (hp > 0)

================================
const double = a => a * 2;
console.log(double(13))
=================================
for (let i = 0; i < scores.length; i++) {
    console.log(`Score ${i}: ${scores[i]}`);
  }
===================================
shift 先頭削除
push 要素追加（末尾）
====================================
splice
要素を削除追加（先頭末尾以外）
（開始位置、削除する数、追加するもの）
=====================================
スプレッド構文
...otherScores
配列の中に配列を入れる場合
関数の引数にも用いられる
=====================================
配列の各要素に何かを追加する
.map
======================================
条件設定
.filter
====================================
指定した文字を取得
const str = 'hello'
console.log(str.length);

// str.substring(開始、終了);
console.log(str.substring(2, 4));

console.log(str[1]);
===================================-
分割
const d = [2019, 11, 14];
  // console.log(d.join('/'));

  const t = '17:08:27';
  // console.log(t.split(':'));
  const [hour, minute, second] = t.split(':');
==============================================
const avg = sum / scores.length;
  console.log(sum);
  console.log(avg);

  // console.log(Math.floor(avg));小数点以下切り捨て
  // console.log(Math.ceil(avg));切り上げ
  // console.log(Math.round(avg));四捨五入
  console.log(avg.toFixed(3));

  console.log(Math.random());
  =============================================
  ランダム生成
   console.log(Math.floor(Math.random() * 6) + 1);
   =============================================
    const d = new Date();
  console.log(d);

  console.log(`${d.getMonth() + 1}月${d.getDate()}日`);
// 0から始まるため＋１
  // d.getFullYear();
  // d.getMonth();
  // d.getDate();
  // d.getDay();
  // d.getHours()
  // d.getMinutes()
  // d.getSeconds()
  // d.getMilliseconds()
=================================================
 const d = new Date(2019, 10);
  d.setHours(10, 20, 30);
  d.setDate(31);
  d.setDate(d.getDate() + 3);
  console.log(d);
  ==============================================
  //  alert("hello");
const answer = confirm("削除しますか？");
if (answer) {
  alert("削除しました。")
} else {
  alert("キャンセルしました");
}
===============================================
let i = 0;
 function showTime() {
   console.log(new Date());
   i ++;
   if(i > 2) {
     clearInterval(intervalId);
   }
 }
 const intervalId = setInterval(showTime, 1000);
=================================================
setTimeout(showTime, 1000);
一回のみ実行
================================================
setIntervalは同じ時間感覚で実行されるため、処理が重なる可能性あり、
setTimeoutは処理は重ならない
=================================================
例外処理
 try {
    console.log(name.toUpperCase());
  } catch (e) { エラーが起こった際の処理
    console.log(e);
  }
  =================================================
  クラス作成
  class Post {
    constructor(text) {
      this.text = text;
      this.likeCount = 0;
    }

    show() {
      console.log(`${this.text} -${this.likeCount}いいね`);
    }
  }
  const posts = [
    new Post("js勉強中"),
    new Post("js楽しい！！"),
  ];
  ==========================================================-